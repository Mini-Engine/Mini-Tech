import Gaffer
import GafferImage
import GafferOSL
import GafferScene
import GafferVDB
import IECore
import MiniGafferVDB
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 4, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["openColorIO"] = GafferImage.OpenColorIOConfigPlug( "openColorIO", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["openColorIO"] )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["SampleGrids"] = MiniGafferVDB.SampleGrids( "SampleGrids" )
parent.addChild( __children["SampleGrids"] )
__children["SampleGrids"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["SceneReader"] = GafferScene.SceneReader( "SceneReader" )
parent.addChild( __children["SceneReader"] )
__children["SceneReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["VolumeScatter"] = GafferVDB.VolumeScatter( "VolumeScatter" )
parent.addChild( __children["VolumeScatter"] )
__children["VolumeScatter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter1"] = GafferScene.PathFilter( "PathFilter1" )
parent.addChild( __children["PathFilter1"] )
__children["PathFilter1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Prune"] = GafferScene.Prune( "Prune" )
parent.addChild( __children["Prune"] )
__children["Prune"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLObject"] = GafferOSL.OSLObject( "OSLObject" )
parent.addChild( __children["OSLObject"] )
__children["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "Cs", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 0 ), ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter2"] = GafferScene.PathFilter( "PathFilter2" )
parent.addChild( __children["PathFilter2"] )
__children["PathFilter2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"] = GafferOSL.OSLCode( "OSLCode" )
parent.addChild( __children["OSLCode"] )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "Density", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["out"].addChild( Gaffer.Color3fPlug( "Cs", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InFloat"] = GafferOSL.OSLShader( "InFloat" )
parent.addChild( __children["InFloat"] )
__children["InFloat"].loadShader( "ObjectProcessing/InFloat" )
__children["InFloat"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AdvectPoints"] = MiniGafferVDB.AdvectPoints( "AdvectPoints" )
parent.addChild( __children["AdvectPoints"] )
__children["AdvectPoints"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter3"] = GafferScene.PathFilter( "PathFilter3" )
parent.addChild( __children["PathFilter3"] )
__children["PathFilter3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"] = Gaffer.Box( "Box" )
parent.addChild( __children["Box"] )
__children["Box"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["frameRange"]["start"].setValue( 1001 )
parent["frameRange"]["end"].setValue( 1020 )
parent["frame"].setValue( 1005.0 )
parent["variables"]["imageCataloguePort"]["value"].setValue( 35385 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["miniExamplesRoot"]["name"], 'readOnly', True )
__children["openColorIO"]["displayTransform"].setValue( 'sRGB - Display/ACES 1.0 - SDR Video' )
__children["SampleGrids"]["in"].setInput( __children["VolumeScatter"]["out"] )
__children["SampleGrids"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["SampleGrids"]["in1"].setInput( __children["SceneReader"]["out"] )
__children["SampleGrids"]["__uiPosition"].setValue( imath.V2f( -6.89999962, -4.94609356 ) )
__children["SceneReader"]["fileName"].setValue( '/home/tengu/dev/data/MiniVolumes/024B_VDB_DUST_EXPORT_v1.${frame}.vdb' )
__children["SceneReader"]["__uiPosition"].setValue( imath.V2f( -8.43999672, 26.0860615 ) )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/scatter' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 23.8602161, -1.55880547 ) )
__children["VolumeScatter"]["in"].setInput( __children["SceneReader"]["out"] )
__children["VolumeScatter"]["filter"].setInput( __children["PathFilter1"]["out"] )
__children["VolumeScatter"]["destination"].setValue( '/' )
__children["VolumeScatter"]["density"].setValue( 0.05000000074505806 )
__children["VolumeScatter"]["__uiPosition"].setValue( imath.V2f( -37.3398361, 3.38593769 ) )
__children["PathFilter1"]["paths"].setValue( IECore.StringVectorData( [ '/vdb' ] ) )
__children["PathFilter1"]["__uiPosition"].setValue( imath.V2f( 36.8885803, 11.4320316 ) )
__children["Prune"]["in"].setInput( __children["AdvectPoints"]["out"] )
__children["Prune"]["filter"].setInput( __children["PathFilter1"]["out"] )
__children["Prune"]["__uiPosition"].setValue( imath.V2f( 25.6672306, -30.4857864 ) )
__children["OSLObject"]["in"].setInput( __children["SampleGrids"]["out"] )
__children["OSLObject"]["filter"].setInput( __children["PathFilter2"]["out"] )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["OSLCode"]["out"]["Cs"] )
__children["OSLObject"]["__uiPosition"].setValue( imath.V2f( -0.043245852, -17.4276314 ) )
__children["PathFilter2"]["paths"].setValue( IECore.StringVectorData( [ '/scatter' ] ) )
__children["PathFilter2"]["__uiPosition"].setValue( imath.V2f( 21.7237415, -11.2661886 ) )
__children["OSLCode"]["parameters"]["Density"].setInput( __children["InFloat"]["out"]["value"] )
__children["OSLCode"]["code"].setValue( 'Cs = color(Density) * 2.0;' )
__children["OSLCode"]["__uiPosition"].setValue( imath.V2f( -19.8000011, -14.6916924 ) )
__children["InFloat"]["parameters"]["name"].setValue( 'density' )
__children["InFloat"]["__uiPosition"].setValue( imath.V2f( -39.2000008, -7.89169455 ) )
__children["AdvectPoints"]["in"].setInput( __children["OSLObject"]["out"] )
__children["AdvectPoints"]["filter"].setInput( __children["PathFilter3"]["out"] )
__children["AdvectPoints"]["velocityLocation"].setValue( '/vdb' )
__children["AdvectPoints"]["startFrame"].setValue( 1001.0 )
__children["AdvectPoints"]["__uiPosition"].setValue( imath.V2f( -0.0432457924, -32.9901276 ) )
__children["PathFilter3"]["paths"].setValue( IECore.StringVectorData( [ '/scatter' ] ) )
__children["PathFilter3"]["__uiPosition"].setValue( imath.V2f( 15.4326267, -44.18507 ) )
__children["Box"]["__uiPosition"].setValue( imath.V2f( 30.5588989, -46.423069 ) )


del __children

