import Gaffer
import GafferArnold
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 2, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["ArnoldOptions"] = GafferArnold.ArnoldOptions( "ArnoldOptions" )
parent.addChild( __children["ArnoldOptions"] )
__children["ArnoldOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Cryptomatte"] = GafferArnold.ArnoldShader( "Cryptomatte" )
parent.addChild( __children["Cryptomatte"] )
__children["Cryptomatte"].loadShader( "cryptomatte" )
__children["Cryptomatte"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldAOVShader"] = GafferArnold.ArnoldAOVShader( "ArnoldAOVShader" )
parent.addChild( __children["ArnoldAOVShader"] )
__children["ArnoldAOVShader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot"] = Gaffer.Dot( "Dot" )
parent.addChild( __children["Dot"] )
__children["Dot"].setup( GafferScene.ScenePlug( "in", ) )
__children["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot"].addChild( Gaffer.BoolPlug( "__uiInputConnectionsMinimised", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["StandardOptions"] = GafferScene.StandardOptions( "StandardOptions" )
parent.addChild( __children["StandardOptions"] )
__children["StandardOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["in"] = GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["out"] = GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["options_renderCamera"] = Gaffer.NameValuePlug( "render:camera", Gaffer.StringPlug( "value", defaultValue = '', ), False, "options_renderCamera", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic )
parent.addChild( __children["options_renderCamera"] )
__children["transform_MB"] = Gaffer.NameValuePlug( "render:transformBlur", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "transform_MB", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic )
parent.addChild( __children["transform_MB"] )
__children["deformation_MB"] = Gaffer.NameValuePlug( "render:deformationBlur", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "deformation_MB", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic )
parent.addChild( __children["deformation_MB"] )
__children["options_renderResolution"] = Gaffer.NameValuePlug( "render:resolution", Gaffer.V2iPlug( "value", defaultValue = imath.V2i( 1024, 778 ), ), False, "options_renderResolution", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic )
parent.addChild( __children["options_renderResolution"] )
__children["ArnoldOptions"]["in"].setInput( __children["StandardOptions"]["out"] )
__children["ArnoldOptions"]["options"]["aaSamples"]["enabled"].setValue( True )
__children["ArnoldOptions"]["options"]["enableAdaptiveSampling"]["value"].setValue( True )
__children["ArnoldOptions"]["options"]["enableAdaptiveSampling"]["enabled"].setValue( True )
__children["ArnoldOptions"]["options"]["aaSamplesMax"]["value"].setValue( 8 )
__children["ArnoldOptions"]["options"]["aaSamplesMax"]["enabled"].setValue( True )
__children["ArnoldOptions"]["options"]["giTotalDepth"]["value"].setValue( 5 )
__children["ArnoldOptions"]["options"]["giTotalDepth"]["enabled"].setValue( True )
__children["ArnoldOptions"]["options"]["giDiffuseDepth"]["value"].setValue( 1 )
__children["ArnoldOptions"]["options"]["giDiffuseDepth"]["enabled"].setValue( True )
__children["ArnoldOptions"]["options"]["giSpecularDepth"]["value"].setValue( 1 )
__children["ArnoldOptions"]["options"]["giSpecularDepth"]["enabled"].setValue( True )
__children["ArnoldOptions"]["options"]["maxSubdivisions"]["value"].setValue( 2 )
__children["ArnoldOptions"]["options"]["maxSubdivisions"]["enabled"].setValue( True )
__children["ArnoldOptions"]["options"]["logFileName"]["value"].setValue( '${project:rootDirectory}/renders/${script:name}/${passName}/stats/${script:name}_${passName}_log.####.txt' )
__children["ArnoldOptions"]["options"]["logFileName"]["enabled"].setValue( True )
__children["ArnoldOptions"]["options"]["statisticsFileName"]["value"].setValue( '${project:rootDirectory}/renders/${script:name}/${passName}/stats/${script:name}_${passName}_statistic.####.txt' )
__children["ArnoldOptions"]["options"]["statisticsFileName"]["enabled"].setValue( True )
__children["ArnoldOptions"]["options"]["profileFileName"]["value"].setValue( '${project:rootDirectory}/renders/${script:name}/${passName}/stats/${script:name}_${passName}_profile.####.txt' )
__children["ArnoldOptions"]["options"]["profileFileName"]["enabled"].setValue( True )
__children["ArnoldOptions"]["__uiPosition"].setValue( imath.V2f( -3.22156549, 3.23203325 ) )
__children["Cryptomatte"]["__uiPosition"].setValue( imath.V2f( -19.0001335, -2.43202877 ) )
__children["ArnoldAOVShader"]["in"].setInput( __children["ArnoldOptions"]["out"] )
__children["ArnoldAOVShader"]["shader"].setInput( __children["Cryptomatte"]["out"] )
__children["ArnoldAOVShader"]["__uiPosition"].setValue( imath.V2f( -3.22156549, -2.43202877 ) )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["BoxIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( -3.22156549, 17.3499985 ) )
__children["BoxOut"]["in"].setInput( __children["ArnoldAOVShader"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The processed output scene.' )
__children["BoxOut"]["passThrough"].setInput( __children["Dot"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["passThrough"], 'noduleLayout:section', 'top' )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( -1.72156549, -17.3499985 ) )
__children["Dot"]["in"].setInput( __children["BoxIn"]["out"] )
Gaffer.Metadata.registerValue( __children["Dot"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["Dot"]["out"], 'noduleLayout:section', 'bottom' )
__children["Dot"]["__uiPosition"].setValue( imath.V2f( 14.5564785, -9.84999847 ) )
__children["Dot"]["__uiInputConnectionsMinimised"].setValue( True )
__children["StandardOptions"]["in"].setInput( __children["BoxIn"]["out"] )
__children["StandardOptions"]["options"]["performanceMonitor"]["value"].setValue( True )
__children["StandardOptions"]["options"]["performanceMonitor"]["enabled"].setValue( True )
__children["StandardOptions"]["options"]["renderCamera"].setInput( __children["options_renderCamera"] )
__children["StandardOptions"]["options"]["renderResolution"].setInput( __children["options_renderResolution"] )
__children["StandardOptions"]["options"]["transformBlur"].setInput( __children["transform_MB"] )
__children["StandardOptions"]["options"]["deformationBlur"].setInput( __children["deformation_MB"] )
__children["StandardOptions"]["__uiPosition"].setValue( imath.V2f( -3.22156549, 8.89609623 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["options_renderCamera"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["options_renderCamera"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["options_renderCamera"], 'spreadsheet:columnName', 'renderCamera' )
Gaffer.Metadata.registerValue( __children["options_renderCamera"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["options_renderCamera"], 'description', 'The primary camera to be used for rendering. If this\nis not specified, then a default orthographic camera\npositioned at the origin is used.' )
Gaffer.Metadata.registerValue( __children["options_renderCamera"], 'label', 'Camera' )
Gaffer.Metadata.registerValue( __children["options_renderCamera"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["options_renderCamera"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["options_renderCamera"]["value"], 'plugValueWidget:type', 'GafferSceneUI.ScenePathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["options_renderCamera"]["value"], 'path:valid', True )
Gaffer.Metadata.registerValue( __children["options_renderCamera"]["value"], 'scenePathPlugValueWidget:setNames', IECore.StringVectorData( [ '__cameras' ] ) )
Gaffer.Metadata.registerValue( __children["options_renderCamera"]["value"], 'scenePathPlugValueWidget:setsLabel', 'Show only cameras' )
Gaffer.Metadata.registerValue( __children["options_renderCamera"]["value"], 'spreadsheet:columnName', 'renderCameraValue' )
Gaffer.Metadata.registerValue( __children["options_renderCamera"]["enabled"], 'spreadsheet:columnName', 'renderCameraEnabled' )
Gaffer.Metadata.registerValue( __children["transform_MB"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["transform_MB"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["transform_MB"], 'spreadsheet:columnName', 'transformBlur' )
Gaffer.Metadata.registerValue( __children["transform_MB"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["transform_MB"], 'description', 'Whether or not transform motion is taken into\naccount in the renderered image. To specify the\nnumber of transform segments to use for each\nobject in the scene, use a StandardAttributes node\nwith appropriate filters.' )
Gaffer.Metadata.registerValue( __children["transform_MB"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["transform_MB"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["transform_MB"]["value"], 'spreadsheet:columnName', 'transformBlurValue' )
Gaffer.Metadata.registerValue( __children["transform_MB"]["enabled"], 'spreadsheet:columnName', 'transformBlurEnabled' )
Gaffer.Metadata.registerValue( __children["deformation_MB"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["deformation_MB"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["deformation_MB"], 'spreadsheet:columnName', 'deformationBlur' )
Gaffer.Metadata.registerValue( __children["deformation_MB"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["deformation_MB"], 'description', 'Whether or not deformation motion is taken into\naccount in the renderered image. To specify the\nnumber of deformation segments to use for each\nobject in the scene, use a StandardAttributes node\nwith appropriate filters.' )
Gaffer.Metadata.registerValue( __children["deformation_MB"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["deformation_MB"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["deformation_MB"]["value"], 'spreadsheet:columnName', 'deformationBlurValue' )
Gaffer.Metadata.registerValue( __children["deformation_MB"]["enabled"], 'spreadsheet:columnName', 'deformationBlurEnabled' )
Gaffer.Metadata.registerValue( __children["options_renderResolution"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["options_renderResolution"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["options_renderResolution"], 'spreadsheet:columnName', 'renderResolution' )
Gaffer.Metadata.registerValue( __children["options_renderResolution"], 'nameValuePlugPlugValueWidget:ignoreNamePlug', True )
Gaffer.Metadata.registerValue( __children["options_renderResolution"], 'description', 'The resolution of the image to be rendered.' )
Gaffer.Metadata.registerValue( __children["options_renderResolution"], 'label', 'Resolution' )
Gaffer.Metadata.registerValue( __children["options_renderResolution"], 'deletable', False )
Gaffer.Metadata.registerValue( __children["options_renderResolution"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["options_renderResolution"]["value"], 'spreadsheet:columnName', 'renderResolutionValue' )
Gaffer.Metadata.registerValue( __children["options_renderResolution"]["enabled"], 'spreadsheet:columnName', 'renderResolutionEnabled' )
Gaffer.Metadata.registerValue( parent, 'nodeGadget:color', imath.Color3f( 0.5, 0.25, 0.25 ) )
Gaffer.Metadata.registerValue( parent, 'icon', 'mini.png' )


del __children

