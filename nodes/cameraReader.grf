import Gaffer
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 2, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["SceneReader"] = GafferScene.SceneReader( "SceneReader" )
parent.addChild( __children["SceneReader"] )
__children["SceneReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Set"] = GafferScene.Set( "Set" )
parent.addChild( __children["Set"] )
__children["Set"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["fileName"] = Gaffer.StringPlug( "fileName", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["fileName"] )
__children["Group"] = GafferScene.Group( "Group" )
parent.addChild( __children["Group"] )
__children["Group"]["in"].addChild( GafferScene.ScenePlug( "in1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Group"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["SceneReader"]["fileName"].setInput( __children["fileName"] )
__children["SceneReader"]["__uiPosition"].setValue( imath.V2f( -11.8500004, 12.4839849 ) )
__children["Set"]["in"].setInput( __children["SceneReader"]["out"] )
__children["Set"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["Set"]["name"].setValue( '__cameras' )
__children["Set"]["__uiPosition"].setValue( imath.V2f( -11.8500004, 2.3839848 ) )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/*' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 1.05000019, 8.88398361 ) )
__children["BoxOut"]["in"].setInput( __children["Group"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["passThrough"], 'noduleLayout:section', 'top' )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( -8.85000038, -14.8160162 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["fileName"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["fileName"], 'description', "The name of the file to be loaded. The file can be\nin any of the formats supported by Cortex's SceneInterfaces." )
Gaffer.Metadata.registerValue( __children["fileName"], 'plugValueWidget:type', 'GafferUI.FileSystemPathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["fileName"], 'path:leaf', True )
Gaffer.Metadata.registerValue( __children["fileName"], 'path:valid', True )
Gaffer.Metadata.registerValue( __children["fileName"], 'path:bookmarks', 'sceneCache' )
Gaffer.Metadata.registerValue( __children["fileName"], 'fileSystemPath:extensions', 'abc lscc scc usd usda usdc usdz vdb' )
Gaffer.Metadata.registerValue( __children["fileName"], 'fileSystemPath:extensionsLabel', 'Show only cache files' )
__children["Group"]["in"][0].setInput( __children["Set"]["out"] )
__children["Group"]["name"].setValue( 'camera' )
__children["Group"]["__uiPosition"].setValue( imath.V2f( -10.3500004, -5.78007793 ) )
Gaffer.Metadata.registerValue( parent, 'nodeGadget:color', imath.Color3f( 0.25, 0.349999964, 0.5 ) )
Gaffer.Metadata.registerValue( parent, 'icon', 'mini.png' )


del __children

